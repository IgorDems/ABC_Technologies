pipeline {
    agent { label 'agent193' }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_credentials')
        DOCKER_REGISTRY = 'docker.io'
        NAMESPACE = 'abc-tech'
        APP_NAME = 'abctechnologies'
        JAVA_HOME = '/usr/lib/jvm/jdk-21-oracle-x64'
        PATH = "$JAVA_HOME/bin:/usr/share/maven/bin:${env.PATH}"
        MAVEN_HOME = '/usr/share/maven'
        MAVEN_OPTS = '-Dmaven.repo.local=/var/jenkins-agent/.m2/repository'
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build') {
            steps {
                sh '''
                    echo "Java:" && java -version
                    echo "Maven:" && mvn -version
                    /usr/bin/mvn clean install -Dmaven.test.skip=true -Dmaven.repo.local=/var/jenkins-agent/.m2/repository
                '''
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("abctechnologies", "-f Dockerfile .")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                        docker tag abctechnologies $DOCKER_USERNAME/abctechnologies
                        docker push $DOCKER_USERNAME/abctechnologies
                    '''
                }
            }
        }

        stage('Run Ansible to Start Container') {
            steps {
                sh 'ansible-playbook ansible/ansibleDocCont.yml --connection=local'
            }
        }

stage('Deploy to Kubernetes') {
    steps {
        script {
            try {
                // Method 2: Using credential ID directly (if you have a kubeconfig credential)
                withKubeConfig([credentialsId: 'certificate_file']) {
                    sh """
                        kubectl get nodes
                        kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                        kubectl create namespace metallb-system --dry-run=client -o yaml | kubectl apply -f -
                        kubectl apply -f k8s/rbac.yml
                        kubectl apply -f k8s/deployment.yml
                        kubectl apply -f k8s/service.yml
                        kubectl rollout status deployment/abctechnologies-dep -n ${NAMESPACE} --timeout=900s
                        kubectl get deployment abctechnologies-dep -n ${NAMESPACE}
                    """
                }
            } catch (err) {
                sh """
                    kubectl describe pods -n ${NAMESPACE} -l app=abc-tech-app || true
                    kubectl logs -n ${NAMESPACE} -l app=abc-tech-app --all-containers --tail=100 || true
                """
                error("Deployment failed: ${err.getMessage()}")
            }
        }
    }
}
    }
}