pipeline {
    agent {
        label 'agent193'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_credentials')
        DOCKER_REGISTRY = 'docker.io'
        NAMESPACE = 'abc-tech'
        APP_NAME = 'abctechnologies'
        JAVA_HOME = '/usr/lib/jvm/jdk-21-oracle-x64'
        PATH = "$JAVA_HOME/bin:/usr/share/maven/bin:${env.PATH}"
        MAVEN_HOME = '/usr/share/maven'
        MAVEN_OPTS = '-Dmaven.repo.local=/var/jenkins-agent/.m2/repository'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    sh '''
                        echo "Java version:"
                        java -version
                        echo "Maven version:"
                        mvn -version
                        echo "Working directory:"
                        pwd
                        ls -la
                        /usr/bin/mvn clean install -Dmaven.test.skip=true -Dmaven.repo.local=$MAVEN_OPTS
                    '''
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${APP_NAME}", '-f Dockerfile .')
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                            docker tag ${APP_NAME} $DOCKER_USERNAME/${APP_NAME}
                            docker push $DOCKER_USERNAME/${APP_NAME}
                            echo "Docker image pushed to DockerHub"
                        '''
                    }
                }
            }
        }

        stage('Start Container with Ansible') {
            steps {
                script {
                    // Before using ansible, make sure Docker is clean and prerequisites are met
                    sh '''
                        docker stop abc-application || true
                        docker rm abc-application || true
                        ansible-playbook ansible/ansibleDocCont.yml --connection=local
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        withKubeConfig(credentialsId: 'kubernetes-ca', serverUrl: 'https://10.0.0.193:6443') {
                            sh """
                                kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply --validate=false -f -
                                
                                kubectl apply -f k8s/rbac.yml
                                kubectl apply -f k8s/deployment.yml
                                kubectl apply -f k8s/service.yml

                                echo "Waiting for deployment rollout..."
                                kubectl rollout status deployment/abctechnologies-dep -n ${NAMESPACE} --timeout=900s

                                echo "Deployment status:"
                                kubectl get deployment abctechnologies-dep -n ${NAMESPACE} -o wide

                                echo "Pod status:"
                                kubectl get pods -n ${NAMESPACE} -l app=abc-tech-app -o wide

                                echo "Recent events:"
                                kubectl get events -n ${NAMESPACE} --sort-by=.metadata.creationTimestamp | tail -n 20
                            """
                        }
                    } catch (Exception e) {
                        echo "Error during Kubernetes deployment: ${e.getMessage()}"
                        withKubeConfig(credentialsId: 'kubernetes-ca', serverUrl: 'https://10.0.0.193:6443') {
                            sh '''
                                echo "Debugging failed deployment..."
                                kubectl describe pods -n ${NAMESPACE} -l app=abc-tech-app || true
                                kubectl logs -n ${NAMESPACE} -l app=abc-tech-app --all-containers --tail=100 || true
                            '''
                        }
                        error("Kubernetes deployment failed.")
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed."
        }
    }
}
