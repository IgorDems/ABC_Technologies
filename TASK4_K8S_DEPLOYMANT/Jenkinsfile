pipeline {
  agent { label 'agent193' }

  stages {
    steps {
        withCredentials([string(credentialsId: 'kube-server', variable: 'KUBE_SERVER'),
                         string(credentialsId: 'kube-ca-data', variable: 'KUBE_CA_DATA'),
                         string(credentialsId: 'kube-client-cert', variable: 'KUBE_CLIENT_CERT'),
                         string(credentialsId: 'kube-client-key', variable: 'KUBE_CLIENT_KEY')]) {
            script {
                def kubeconfigContent = """
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: ${env.KUBE_CA_DATA}
    server: ${env.KUBE_SERVER}
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: ${env.KUBE_CLIENT_CERT}
    client-key-data: ${env.KUBE_CLIENT_KEY}
                """

                writeFile file: '/tmp/kubeconfig', text: kubeconfigContent

                withKubeConfig(['/tmp/kubeconfig']) {
                    sh 'kubectl get nodes'
                    sh 'kubectl apply -f k8s/deployment.yaml'
                    sh 'kubectl apply -f k8s/service.yaml'
                }
            }
        }
    }
  }
}
