pipeline {
    agent { label 'agent193' }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_credentials')
        DOCKER_REGISTRY = 'docker.io'
        NAMESPACE = 'abc-tech'
        APP_NAME = 'abctechnologies'
        JAVA_HOME = '/usr/lib/jvm/jdk-21-oracle-x64'
        PATH = "$JAVA_HOME/bin:/usr/share/maven/bin:${env.PATH}"
        MAVEN_HOME = '/usr/share/maven'
        MAVEN_OPTS = '-Dmaven.repo.local=/var/jenkins-agent/.m2/repository'
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build') {
            steps {
                sh '''
                    echo "Java:" && java -version
                    echo "Maven:" && mvn -version
                    /usr/bin/mvn clean install -Dmaven.test.skip=true -Dmaven.repo.local=/var/jenkins-agent/.m2/repository
                '''
            }
            post {
                success {
                    archiveArtifacts artifacts: '**/target/*.war', fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("abctechnologies", "-f Dockerfile .")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                        docker tag abctechnologies $DOCKER_USERNAME/abctechnologies
                        docker push $DOCKER_USERNAME/abctechnologies
                    '''
                }
            }
        }

        stage('Run Ansible to Start Container') {
            steps {
                sh 'ansible-playbook ansible/ansibleDocCont.yml --connection=local'
            }
        }

        stage('Kubernetes Configuration') {
      steps {
        withCredentials([string(credentialsId: 'kube-server', variable: 'KUBE_SERVER'),
                         string(credentialsId: 'kube-ca-data', variable: 'KUBE_CA_DATA'),
                         string(credentialsId: 'kube-client-cert', variable: 'KUBE_CLIENT_CERT'),
                         string(credentialsId: 'kube-client-key', variable: 'KUBE_CLIENT_KEY')]) {
            script {
                def kubeconfigContent = """
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: ${env.KUBE_CA_DATA}
    server: ${env.KUBE_SERVER}
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: ${env.KUBE_CLIENT_CERT}
    client-key-data: ${env.KUBE_CLIENT_KEY}
                """

                writeFile file: '/tmp/kubeconfig', text: kubeconfigContent
            }
        }

        withKubeConfig(['/tmp/kubeconfig']) {
            sh 'kubectl get nodes'
            // sh 'kubectl apply -f k8s/deployment.yaml'
            // sh 'kubectl apply -f k8s/service.yaml'
        }
      }
    }


        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        withKubeConfig([
                            credentialsId: 'kubernetes-ca',
                            serverUrl: 'https://10.0.0.193:6443'
                        ]) {
                            sh """
                                kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                                kubectl apply -f k8s/rbac.yml
                                kubectl apply -f k8s/deployment.yml
                                kubectl apply -f k8s/service.yml
                                kubectl rollout status deployment/abctechnologies-dep -n ${NAMESPACE} --timeout=900s
                                kubectl get deployment abctechnologies-dep -n ${NAMESPACE}
                            """
                        }
                    } catch (err) {
                        sh """
                            kubectl describe pods -n ${NAMESPACE} -l app=abc-tech-app || true
                            kubectl logs -n ${NAMESPACE} -l app=abc-tech-app --all-containers --tail=100 || true
                        """
                        error("Deployment failed: ${err.getMessage()}")
                    }
                }
            }
        }
    }
}
